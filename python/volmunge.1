.\" Automatically generated by Pandoc 2.5
.\"
.TH "VOLMUNGE" "1" "" "Coda Distributed File System" ""
.hy
.SH NAME
.PP
volmunge \- manipulates objects within Coda
.SH SYNOPSIS
.PP
\f[B]volmunge\f[R] <\-adflmuioqvx> dir
.TP
.B \f[B]\-a\f[R]
Prints out everything.
.TP
.B \f[B]\-d\f[R]
Prints out UNIX directories, but not volume mount points.
.TP
.B \f[B]\-f\f[R]
Prints out all objects which are not volume mount points (eg UNIX files
and symlinks); this performs a stat() call on all non\-volume objects
which is ideal for forcing resolution on a volume.
.TP
.B \f[B]\-m\f[R]
Prints out those objects which are volume mount points.
.TP
.B \f[B]\-u\f[R]
Prints out those objects which are unmounted volume mount points
(mount\-links).
.TP
.B \f[B]\-i\f[R]
Prints out those objects which indicate there is an unrepaired conflict
(inconsistent object).
.TP
.B \f[B]\-o\f[R]
Perform and open() call on all UNIX files, forces a fetch into local
Coda cache.
.TP
.B \f[B]\-q\f[R]
Be less verbose.
.TP
.B \f[B]\-v\f[R]
Be more verbose.
.TP
.B \f[B]\-x\f[R]
Cross volume boundaries.
.SH DESCRIPTION
.PP
\f[B]volmunge\f[R]: is ideal for identifying Coda objects versus regular
UNIX files (including UNIX directories) stored within the Coda
filesystem.
It will work recursively.
.PP
Because the \f[B]\-f\f[R] and \f[B]\-o\f[R] explicitly call the stat()
and open() functions respectively, resolution can be forced with
volmunge if one is rebuilding a replicated Coda volume or group of
volumes mounted on top of each other.
.PP
However, it is expected that stat() will be called on all objects either
way because Coda does not provide directory vs.\ file information in the
readdir() result so any type of volume traversal should trigger
automatic resolution.
.SH SEE ALSO
.PP
\f[B]find\f[R](1)
.SH AUTHOR
.PP
Henry M.\ Pierce, 1998, created.
.PP
Jan Harkes, 2021, rewritten in Python.
