#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# pre-commit checks for all staged files
staged_files=`git diff --cached --name-only`
exit_code=0

CODA_RELEASE=7
COPYRIGHT_YEAR=$(date +'%Y')

echo "Pre-commit hook - Checking staged files copyright blurbs"
for single_file in $staged_files
do
    # is there a license blurb?
    if test -f "$single_file" && head -1 "$single_file" | grep -q gpl ; then
        # is the release current
        if ! head -10 "$single_file" | grep -q "Release $CODA_RELEASE" ; then
            need_release_update="${need_release_update:+"$need_release_update "}$single_file"
            exit_code=1
        fi
        # is the year current
        if ! head -10 "$single_file" | grep -q $COPYRIGHT_YEAR ; then
            need_copyright_update="${need_copyright_update:+"$need_copyright_update "}$single_file"
            exit_code=1
        fi
    fi
done

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

if test $exit_code -eq 0
then
    echo ""
    echo "${GREEN}Great! All files pass initial checks.${NC}"
    echo ""
else
    echo ""
    echo "${RED}[ERROR]${NC} Not committing."

    if test "${need_release_update-X}" != "X"
    then
        echo ""
        echo "The following files need to be updated for Coda release $CODA_RELEASE"
        echo ""
        printf "    %s\n" $need_release_update
    fi
    if test "${need_copyright_update-X}" != "X"
    then
        echo ""
        echo "The following files need their copyright year updated to $COPYRIGHT_YEAR"
        echo ""
        printf "    %s\n" $need_copyright_update
    fi
fi
exit $exit_code	
