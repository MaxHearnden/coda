#!/bin/sh
#
# Create realm CA certificate and server certificates.
#
# Create a file named 'realm.example.org.servers' containing the names
# of servers in your realm. Their certificate will be placed in
# 'realm.example.org.certs/'.
#
# server certificate will be regenerated anytime this script is run.
#

REALM=$1

if [ -z "$REALM" ] ; then
    echo "Usage: $0 <realm.example.org>"
    exit 0
fi

# file containing parameters for realm certificate
REALM_TEMPLATE="$REALM.template"

# file containing list of servers for which we should create certificates
REALM_SERVERS="$REALM.servers"

# Realm private key, certificate signing request and (self)signed certificate
REALM_KEY="$REALM.key"
REALM_REQ="$REALM.csr"
REALM_CRT="$REALM.crt"
REALM_OUT="$REALM.info"

# directory containing server certificates
SERVER_CERTS="$REALM.certs"

# some defaults for generating certificates
REALM_EXPIRATION_DAYS=365
SERVER_EXPIRATION_DAYS=7
SECURITY_PARAMS="--rsa --sec-param=medium" # 2048 bit RSA key

## Generate template for Realm CA certificate
if [ ! -f "$REALM_TEMPLATE" ] ; then
    cat > "$REALM_TEMPLATE" << EOF
cn = "$REALM Realm CA"
nc_permit_dns = .$REALM
#nc_permit_ip = 0.0.0.0/0

expiration_days = $REALM_EXPIRATION_DAYS
challenge_password = 123456
ca
cert_signing_key
crl_signing_key
EOF
    echo "Created $REALM_TEMPLATE, check if it is correct and rerun $0"
    exit 0
fi


## Generate realm private key
if [ ! -f "$REALM_KEY" ] ; then
    SECURITY_PARAMS="--rsa --sec-param=medium" # 2048 bit RSA key
    certtool --generate-privkey $SECURITY_PARAMS --outfile "$REALM_KEY"
fi


## Generate certificate request for realm CA
if [ ! -f "$REALM_REQ" -o "$REALM_TEMPLATE" -nt "$REALM_CRT" ] ; then
    certtool --generate-request --template "$REALM_TEMPLATE" \
        --load-privkey "$REALM_KEY" --outfile "$REALM_REQ"
fi


## Generate self-signed realm CA certificate
if [ ! -f "$REALM_CRT" -o "$REALM_TEMPLATE" -nt "$REALM_CRT" ] ; then
    if [ -f "$REALM_CRT" ] ; then
        echo "I am about to overwrite $REALM_CRT with a self-signed certificate because"
        echo "the template was updated. If you are sure then remove $REALM_CRT manually."
        exit 1
    fi
    certtool --generate-self-signed --template "$REALM_TEMPLATE" \
        --load-privkey "$REALM_KEY" --outfile "$REALM_CRT" \
        --stdout-info > "$REALM_OUT"
fi


## Generate/update certificates for servers
if [ -f "$REALM_SERVERS" ] ; then
    mkdir -p "$SERVER_CERTS"
    cat "$REALM_SERVERS" | while read SERVER ; do
        SERVER_TPL="$SERVER_CERTS/$SERVER.template"
        SERVER_KEY="$SERVER_CERTS/$SERVER.key"
        SERVER_CRT="$SERVER_CERTS/$SERVER.crt"
        SERVER_OUT="$SERVER_CERTS/$SERVER.info"

        echo "Generating certificate for $SERVER"

        ## Generate template for Server certificate
        if [ ! -f "$SERVER_TPL" ] ; then
            SERVER_IP=$(dig -ta +short "$SERVER" | tail -1)

            cat > "$SERVER_TPL" << EOF
cn = "$SERVER"
dns_name = "$SERVER"
ip_address = "$SERVER_IP"

expiration_days = $SERVER_EXPIRATION_DAYS
challenge_password = 123456
signing_key
encryption_key
EOF
        fi


        ## Generate private key
        if [ ! -f "$SERVER_KEY" ] ; then
            certtool --generate-privkey $SECURITY_PARAMS --outfile "$SERVER_KEY"
            #scp "$SERVER_KEY" "root@$SERVER:/etc/coda/ssl/server.key"
        fi

        ## Regenerate realm-signed server certificate
        certtool --generate-certificate --template "$SERVER_TPL" \
            --load-ca-certificate "$REALM_CRT" --load-ca_privkey "$REALM_KEY" \
            --load-privkey "$SERVER_KEY" --outfile "$SERVER_CRT" \
            --stdout-info > "$SERVER_OUT"
        cat "$REALM_CRT" >> "$SERVER_CRT"

        scp "$SERVER_KEY" "root@$SERVER:/etc/coda/ssl/server.key"
        scp "$SERVER_CRT" "root@$SERVER:/etc/coda/ssl/server.crt"
        echo
    done
fi

